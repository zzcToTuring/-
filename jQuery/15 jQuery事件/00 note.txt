1、单个事件注册---与其他事件和原生基本一致
  语法：
    element.事件(function{})
    $("div").click(function(){})



2、事件处理 on() 绑定事件  方法在匹配元素上绑定一个或多个事件的事件处理函数
  语法：
    element.on(events,[selector],fn)
  参数：
    1. events:一个或多个用空格分隔的事件类型，如"click"或"keydown"
    2. selector: 元素的子元素选择器
    3. fn:回调函数 即绑定在元素身上的侦听函数
  优势：
    1、可以绑定多个事件
     $(“div”).on({
       mouseover: function(){},
       mouseout: function(){},
       click: function(){}
     });
     如果事件处理程序相同
     $(“div”).on(“mouseover mouseout”, function() {
        $(this).toggleClass(“current”);
     });

    2、可以事件委派操作
    $('ul').on('click', 'li', function() {
        alert('hello world!');
    });

    3、动态创建的元素，click() 没有办法绑定事件， on() 可以给动态生成的元素绑定事件

综上，事件的绑定可以使用on来代替

3、one  ---->与on基本相同，但是被one绑定的事件只能触发一次

4、事件处理off()解绑事件
    off()方法可以移除通过on方法添加的时间处理程序
语法
    $("p").off() // 解绑p元素所有事件处理程序
    $("p").off( "click") // 解绑p元素上面的点击事件 后面的 foo 是侦听函数名
    $("ul").off("click", "li"); // 解绑事件委托

5 自动触发事件trigger()
    element.click() // 第一种简写形式
    element.trigger("type") // 第二种自动触发模式
    $("p").on("click", function () {
        alert("hi~");
    });
    $("p").trigger("click"); // 此时自动触发点击事件，不需要鼠标点击
    element.triggerHandler(type) // 第三种自动触发模式，triggerHandler模式不会触发元素的默认行为，这是和前面两种的区别。

6、jQuery的事件对象--事件被触发，就会有事件对象的产生。
    阻止默认行为：event.preventDefault() 或者 return false
    阻止冒泡： event.stopPropagation()
    element.on(events,[selector],function(event) {}

